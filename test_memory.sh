#!/bin/bash

echo "üß™ TESTING MEMORIA PERSISTENTE - AVANCE 2"
echo "=========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

echo -e "${BLUE}1. üîç Verificando Sistema de Memoria en Health Check...${NC}"
HEALTH_RESPONSE=$(curl -s http://localhost:8000/health)
if echo "$HEALTH_RESPONSE" | grep -q "memory_system"; then
    echo -e "${GREEN}‚úÖ Sistema de memoria detectado!${NC}"
    echo "   Database: $(echo "$HEALTH_RESPONSE" | grep -o '"database":"[^"]*"' | cut -d'"' -f4)"
    echo "   Memory System: $(echo "$HEALTH_RESPONSE" | grep -o '"memory_system":"[^"]*"' | cut -d'"' -f4)"
else
    echo -e "${RED}‚ùå Sistema de memoria no encontrado en health check${NC}"
    exit 1
fi

echo ""
echo -e "${BLUE}2. üìä Estad√≠sticas Generales del Sistema de Memoria:${NC}"
curl -s http://localhost:8000/api/v1/memory/stats | jq '.' 2>/dev/null || curl -s http://localhost:8000/api/v1/memory/stats

echo ""
echo -e "${BLUE}3. üíæ Probando Almacenamiento de Memoria Persistente:${NC}"

# Almacenar memoria short-term
echo "   üìù Almacenando memoria short-term..."
STORE_SHORT_RESPONSE=$(curl -s -X POST "http://localhost:8000/api/v1/memory/store" \
  -H "Content-Type: application/json" \
  -d '{
    "agent_id": "default",
    "memory_type": "short_term",
    "content": "El usuario prefiere respuestas concisas y t√©cnicas",
    "context": "Preferencias de comunicaci√≥n detectadas",
    "importance_score": 7,
    "tags": ["preferences", "communication"]
  }')

echo "   Resultado: $(echo "$STORE_SHORT_RESPONSE" | jq -r '.message' 2>/dev/null || echo "$STORE_SHORT_RESPONSE")"

# Almacenar memoria medium-term
echo "   üìö Almacenando memoria medium-term..."
STORE_MEDIUM_RESPONSE=$(curl -s -X POST "http://localhost:8000/api/v1/memory/store" \
  -H "Content-Type: application/json" \
  -d '{
    "agent_id": "default",
    "memory_type": "medium_term",
    "content": "Proyecto AgentOS: Sistema MCP implementado exitosamente",
    "context": "Logro t√©cnico importante en el proyecto",
    "importance_score": 9,
    "tags": ["project", "achievement", "mcp"]
  }')

echo "   Resultado: $(echo "$STORE_MEDIUM_RESPONSE" | jq -r '.message' 2>/dev/null || echo "$STORE_MEDIUM_RESPONSE")"

# Almacenar memoria long-term
echo "   üèõÔ∏è Almacenando memoria long-term..."
STORE_LONG_RESPONSE=$(curl -s -X POST "http://localhost:8000/api/v1/memory/store" \
  -H "Content-Type: application/json" \
  -d '{
    "agent_id": "default",
    "memory_type": "long_term",
    "content": "Principios fundamentales: Siempre priorizar c√≥digo funcional y testeable",
    "context": "Valores fundamentales del desarrollo",
    "importance_score": 10,
    "tags": ["principles", "development", "core"]
  }')

echo "   Resultado: $(echo "$STORE_LONG_RESPONSE" | jq -r '.message' 2>/dev/null || echo "$STORE_LONG_RESPONSE")"

echo ""
echo -e "${BLUE}4. üß† Probando Recuperaci√≥n de Memoria:${NC}"

# Recuperar todas las memorias
echo "   üîç Recuperando todas las memorias del agente default..."
RECALL_ALL_RESPONSE=$(curl -s -X POST "http://localhost:8000/api/v1/memory/recall" \
  -H "Content-Type: application/json" \
  -d '{
    "agent_id": "default",
    "limit": 10
  }')

echo "   Memorias encontradas: $(echo "$RECALL_ALL_RESPONSE" | jq -r '.count' 2>/dev/null || echo "Error")"
echo "$RECALL_ALL_RESPONSE" | jq '.memories[] | {type: .memory_type, content: .content, importance: .importance_score}' 2>/dev/null || echo "$RECALL_ALL_RESPONSE"

echo ""
echo -e "${BLUE}5. üîç Probando B√∫squeda Espec√≠fica en Memoria:${NC}"

# Buscar por t√©rmino espec√≠fico
echo "   üéØ Buscando memorias que contengan 'MCP'..."
SEARCH_RESPONSE=$(curl -s -X POST "http://localhost:8000/api/v1/memory/recall" \
  -H "Content-Type: application/json" \
  -d '{
    "agent_id": "default",
    "search_term": "MCP",
    "limit": 5
  }')

echo "   Resultados de b√∫squeda:"
echo "$SEARCH_RESPONSE" | jq '.memories[] | {content: .content, tags: .tags}' 2>/dev/null || echo "$SEARCH_RESPONSE"

echo ""
echo -e "${BLUE}6. üìà Estad√≠sticas de Memoria del Agente:${NC}"
AGENT_STATS_RESPONSE=$(curl -s http://localhost:8000/api/v1/memory/stats/default)
echo "$AGENT_STATS_RESPONSE" | jq '.memory_stats' 2>/dev/null || echo "$AGENT_STATS_RESPONSE"

echo ""
echo -e "${BLUE}7. üí¨ Probando Chat + Almacenamiento Autom√°tico:${NC}"

# Crear conversaci√≥n de prueba
echo "   üó®Ô∏è Creando conversaci√≥n que genere memoria..."
CHAT_RESPONSE=$(curl -s -X POST "http://localhost:8000/api/v1/chat" \
  -H "Content-Type: application/json" \
  -d '{
    "message": "Recuerda que mi nombre es Tatan y trabajo en desarrollo de IA",
    "agent_id": "default"
  }')

CONV_ID=$(echo "$CHAT_RESPONSE" | jq -r '.conversation_id' 2>/dev/null)
echo "   Conversaci√≥n creada: $CONV_ID"
echo "   Respuesta del agente:"
echo "$CHAT_RESPONSE" | jq -r '.response' 2>/dev/null || echo "$CHAT_RESPONSE"

# Almacenar informaci√≥n de la conversaci√≥n en memoria
echo ""
echo "   üíæ Almacenando informaci√≥n de la conversaci√≥n en memoria..."
CONV_MEMORY_RESPONSE=$(curl -s -X POST "http://localhost:8000/api/v1/memory/store" \
  -H "Content-Type: application/json" \
  -d "{
    \"agent_id\": \"default\",
    \"memory_type\": \"long_term\",
    \"content\": \"Usuario: Tatan, especialista en desarrollo de IA\",
    \"context\": \"Informaci√≥n personal del usuario obtenida en conversaci√≥n\",
    \"importance_score\": 8,
    \"tags\": [\"user_info\", \"personal\", \"ai_development\"]
  }")

echo "   Memoria de conversaci√≥n almacenada: $(echo "$CONV_MEMORY_RESPONSE" | jq -r '.success' 2>/dev/null)"

echo ""
echo -e "${BLUE}8. üîÑ Migraci√≥n de Conversaci√≥n In-Memory a BD:${NC}"
if [ ! -z "$CONV_ID" ] && [ "$CONV_ID" != "null" ]; then
    echo "   üì¶ Migrando conversaci√≥n $CONV_ID a base de datos..."
    MIGRATE_RESPONSE=$(curl -s -X POST "http://localhost:8000/api/v1/migrate/conversation/$CONV_ID")
    echo "   Migraci√≥n: $(echo "$MIGRATE_RESPONSE" | jq -r '.success' 2>/dev/null)"
    echo "   Mensajes migrados: $(echo "$MIGRATE_RESPONSE" | jq -r '.messages_migrated' 2>/dev/null)"
else
    echo "   ‚ö†Ô∏è No se pudo obtener ID de conversaci√≥n para migraci√≥n"
fi

echo ""
echo -e "${BLUE}9. ‚öñÔ∏è Comparaci√≥n Sistemas de Memoria:${NC}"
COMPARE_RESPONSE=$(curl -s -X POST "http://localhost:8000/api/v1/memory/compare" \
  -H "Content-Type: application/json" \
  -d '{
    "agent_id": "default"
  }')

echo "   üìä Comparaci√≥n In-Memory vs Persistente:"
echo "$COMPARE_RESPONSE" | jq '.comparison' 2>/dev/null || echo "$COMPARE_RESPONSE"
echo ""
echo "   üéØ Recomendaci√≥n: $(echo "$COMPARE_RESPONSE" | jq -r '.recommendation' 2>/dev/null)"

echo ""
echo -e "${BLUE}10. üß™ Verificando Persistencia (Memoria sobrevive restarts):${NC}"
echo "   üìã Verificando que las memorias persisten en base de datos..."

# Verificar que las memorias est√°n en BD
FINAL_STATS=$(curl -s http://localhost:8000/api/v1/memory/stats/default)
TOTAL_MEMORIES=$(echo "$FINAL_STATS" | jq -r '.memory_stats.total_memories' 2>/dev/null || echo "0")

if [ "$TOTAL_MEMORIES" -gt "0" ]; then
    echo -e "${GREEN}   ‚úÖ Memorias persistentes verificadas: $TOTAL_MEMORIES${NC}"
    echo "   üíæ Las memorias sobrevivir√°n a restarts del sistema"
else
    echo -e "${RED}   ‚ùå No se encontraron memorias persistentes${NC}"
fi

echo ""
echo -e "${GREEN}‚úÖ ¬°AVANCE 2 COMPLETADO!${NC}"
echo ""
echo -e "${YELLOW}üìä RESUMEN AVANCE 2 - MEMORIA PERSISTENTE:${NC}"
echo "   ‚úÖ Base de datos PostgreSQL conectada"
echo "   ‚úÖ Tablas de memoria creadas autom√°ticamente"
echo "   ‚úÖ Almacenamiento persistente funcionando"
echo "   ‚úÖ B√∫squeda por contenido implementada"
echo "   ‚úÖ Tipos de memoria: short/medium/long term"
echo "   ‚úÖ Sistema de importancia y tags"
echo "   ‚úÖ Migraci√≥n de conversaciones in-memory"
echo "   ‚úÖ Comparaci√≥n de sistemas de memoria"
echo "   ‚úÖ Memoria sobrevive restarts"

echo ""
echo -e "${BLUE}üéØ PR√ìXIMO AVANCE:${NC}"
echo "   ‚Ä¢ Avance 3: Herramientas Reales (File ops, Web browser)"
echo "   ‚Ä¢ Comando: ./test_tools.sh (pr√≥ximamente)"

echo ""
echo -e "${YELLOW}üåê URLs Memoria Persistente:${NC}"
echo "   ‚Ä¢ Stats Sistema: http://localhost:8000/api/v1/memory/stats"
echo "   ‚Ä¢ Store Memory: http://localhost:8000/api/v1/memory/store"
echo "   ‚Ä¢ Recall Memory: http://localhost:8000/api/v1/memory/recall"
echo "   ‚Ä¢ Agent Stats: http://localhost:8000/api/v1/memory/stats/{agent_id}"
echo "   ‚Ä¢ Migrate Conv: http://localhost:8000/api/v1/migrate/conversation/{id}"
echo "   ‚Ä¢ Compare: http://localhost:8000/api/v1/memory/compare"

echo ""
echo -e "${PURPLE}üöÄ BENEFICIO INMEDIATO:${NC}"
echo "   ‚Ä¢ Tu sistema ahora RECUERDA todo entre sesiones"
echo "   ‚Ä¢ B√∫squeda inteligente en conversaciones pasadas"
echo "   ‚Ä¢ Memoria categorizada por importancia"
echo "   ‚Ä¢ Base s√≥lida para IA que aprende y evoluciona" 